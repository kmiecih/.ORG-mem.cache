#include <stdio.h>
#include <sys/time.h>


// Tamanho da matriz (imagem)
#ifndef TAM
#define TAM 1000
#endif

// Estrutura para representar um pixel (RGB)
struct pix {
    unsigned int r, g, b;
};

// Matriz de pixels
struct pix color[TAM][TAM];

int main() {
    int i, j;

    // Medição do tempo de execução
    double ti, tf, tempo;
    ti = tf = tempo = 0;
    struct timeval tempo_inicio, tempo_fim;

    // Iniciar a medição do tempo
    gettimeofday(&tempo_inicio, NULL);

    // Meu código
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            color[i][j].r = (color[i][j].r + color[i][j].g + color[i][j].b) / 3;
            color[i][j].g = (color[i][j].r + color[i][j].g + color[i][j].b) / 3;
            color[i][j].b = (color[i][j].r + color[i][j].g + color[i][j].b) / 3;
        }
    }
    
    // Finalizar a medição do tempo
    gettimeofday(&tempo_fim, NULL);

    // Calcular o tempo gasto em milissegundos
    tf = (double)tempo_fim.tv_usec + ((double)tempo_fim.tv_sec * (1000000.0));
    ti = (double)tempo_inicio.tv_usec + ((double)tempo_inicio.tv_sec * (1000000.0));
    tempo = (tf - ti) / 1000;

    // Exibir o tempo gasto
    printf("Tempo gasto em milissegundos: %.3f\n", tempo);


    return 0;
}
